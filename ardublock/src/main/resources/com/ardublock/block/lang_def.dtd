<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
    Document   : lang_def.dtd
    Description:
        This defines the language and initial workspace setup.
-->


<!ELEMENT BlockLangDef ( BlockConnectorShapes, BlockGenuses, BlockFamilies?, BlockDrawerSets?, Pages?, TrashCan?, MiniMap?)>

<!--This defines a mapping between block connector shape type to number-->
<!ELEMENT BlockConnectorShapes (BlockConnectorShape*)>
<!ELEMENT BlockConnectorShape EMPTY>
<!ATTLIST BlockConnectorShape shape-type CDATA #REQUIRED>
<!ATTLIST BlockConnectorShape shape-number CDATA #REQUIRED>

<!ELEMENT BlockGenuses (BlockGenus*)>
<!--This defines a single block genus-->
<!ELEMENT BlockGenus (description?, BlockConnectors?,Stubs?, Images?, LangSpecProperties?)>
<!ATTLIST BlockGenus name CDATA #REQUIRED>
<!ATTLIST BlockGenus initlabel CDATA #REQUIRED>
<!-- the kind of a genus can affect the rendering of a block.  relevant kinds are: 
    - command: performs an operation and may take in more than one input 
    - data: returns primitive values such as number, string, boolean
    - function: takes in an input and performs an operation to produce an ouput
-->
<!ATTLIST BlockGenus kind CDATA #REQUIRED>
<!ATTLIST BlockGenus color CDATA #REQUIRED>
<!ATTLIST BlockGenus editable-label (yes|no) "no">
<!ATTLIST BlockGenus label-unique (yes|no) "no">
<!ATTLIST BlockGenus is-label-value (yes|no) "no">
<!ATTLIST BlockGenus label-prefix CDATA #IMPLIED>
<!ATTLIST BlockGenus label-suffix CDATA #IMPLIED>
<!ATTLIST BlockGenus page-label-enabled (yes|no) "no">
<!--is-starter and is-terminator only apply to blocks of kind: command -->
<!ATTLIST BlockGenus is-starter (yes|no) "no">
<!ATTLIST BlockGenus is-terminator (yes|no) "no">


<!--This defines a block description and the description of its block arguments-->
<!ELEMENT arg EMPTY>
<!ATTLIST arg n CDATA #REQUIRED name CDATA #IMPLIED>

<!ELEMENT description (text, arg-description*)>
<!ELEMENT text (#PCDATA|note|em|i|br|arg)*>
<!ELEMENT arg-description (#PCDATA)>
<!ATTLIST arg-description n CDATA #REQUIRED name CDATA #REQUIRED>
<!ELEMENT note (#PCDATA|arg|i)*>
<!ELEMENT em (#PCDATA)>
<!ELEMENT i (#PCDATA)>
<!ELEMENT br (#PCDATA)>

<!--BlockConnectors are where blocks get connected-->
<!ELEMENT BlockConnectors (BlockConnector*)>
<!ELEMENT BlockConnector (DefaultArg?)>
<!ATTLIST BlockConnector label CDATA #IMPLIED>
<!ATTLIST BlockConnector label-editable (yes|no) "no">
<!-- Order matters with socket connectors and at most one plug is allowed (no multiple return types) -->
<!ATTLIST BlockConnector connector-kind (plug|socket) #REQUIRED>
<!-- for connector-type use the shape-type values specified in block connectors-->
<!ATTLIST BlockConnector connector-type CDATA #REQUIRED>  
<!ATTLIST BlockConnector position-type (single|mirror|bottom) "single"> 
<!ATTLIST BlockConnector is-expandable (yes|no) "no">  

<!ELEMENT DefaultArg EMPTY>
<!ATTLIST DefaultArg genus-name CDATA #REQUIRED> 
<!ATTLIST DefaultArg label CDATA #IMPLIED>

<!ELEMENT Stubs (Stub*)>
<!--This defines a stub of a block, so that the block can exist as a single entity and have mini-references to it-->
<!ELEMENT Stub  (LangSpecProperties)>
<!ATTLIST Stub scope CDATA #IMPLIED>
<!ATTLIST Stub stub-genus (getter|setter|caller|agent|inc) #REQUIRED>

<!--Define las imágenes que se dibujan en el mismo bloque.
      Nota: Por el momento, sólo una imagen está habilitado y envoltura de texto y editar la imagen no tendrá efecto.
      Nota: asegúrese de que FileLocation especificada es relativa al directorio de espacio de trabajo -->
<!ELEMENT Images (Image)>
<!ELEMENT Image (FileLocation)>
<!ATTLIST Image wrap-text (yes|no) "no">
<!ATTLIST Image image-editable (yes|no) "no">
<!ATTLIST Image block-location (center|east|west|north|south|southeast|southwest|northeast|northwest) "center">
<!ATTLIST Image width CDATA #IMPLIED>
<!ATTLIST Image height CDATA #IMPLIED>
<!ELEMENT FileLocation (#PCDATA)>


<!ELEMENT LangSpecProperties (LangSpecProperty*)>
<!ELEMENT LangSpecProperty (#PCDATA)>
<!ATTLIST LangSpecProperty key CDATA #REQUIRED>
<!ATTLIST LangSpecProperty value CDATA #REQUIRED>

<!--This defines a BlockGenus Family-->
<!ELEMENT BlockFamilies (BlockFamily*)>
<!ELEMENT BlockFamily (FamilyMember*)>
<!ELEMENT FamilyMember (#PCDATA)>

<!-- Defines BlockDrawerSets and their Block Drawer content-->
<!ELEMENT BlockDrawerSets (BlockDrawerSet*)>
<!ELEMENT BlockDrawerSet (BlockDrawer*)>
<!ATTLIST BlockDrawerSet type (bar|stack) "bar">
<!ATTLIST BlockDrawerSet name CDATA #REQUIRED>
<!ATTLIST BlockDrawerSet location (east|west|north|south|northeast|southeast|southwest|northwest) "west">
<!-- 
ventana-per-cajón especifica si cada cajón debe ser su propia ventana se puede arrastrar. de lo contrario, todos los cajones
están contenidas dentro de una ventana arrastrable y sólo un cajón se puede abrir a la vez.
Independientemente de si la ventana es arrastrable depende si cajón arrastrable está ajustado a "sí". --> 
<!ATTLIST BlockDrawerSet window-per-drawer (yes|no) "yes">
<!ATTLIST BlockDrawerSet drawer-draggable (yes|no) "yes">
<!-- the width of all the drawers within this set -->
<!ATTLIST BlockDrawerSet width CDATA #IMPLIED> 

<!--This defines BlockDrawers and their content-->
<!ELEMENT BlockDrawer ( (BlockGenusMember | Separator | NextLine)* )>
<!ATTLIST BlockDrawer name CDATA #REQUIRED>
<!ATTLIST BlockDrawer type (default|factory|page|custom) "default">
<!ATTLIST BlockDrawer is-open (yes|no) "no">
<!ATTLIST BlockDrawer button-color CDATA #REQUIRED>
<!ELEMENT BlockGenusMember (#PCDATA)>
<!ELEMENT Separator EMPTY>
<!ELEMENT NextLine EMPTY>

<!-- 
Define Páginas dividen el lienzo de bloques y los PageDrawers opcionales asociados con ellos
      Cada página puede tener sólo una PageDrawer.
      Por ahora, cada página debe tener un cajón o hay páginas puede tener cajones.
      El lienzo de bloques necesitan no contiene ninguna página. Usted puede optar por tener
      un lienzo en blanco en lugar de un lienzo de páginas.
-->
<!ELEMENT Pages (Page*)>
<!-- 
	 cajón con páginas auto genera un nuevo cajón para cada nueva página creada por un usuario
      y crea un cajón vacío para cada página que no especifica un cajón página 
-->
<!ATTLIST Pages drawer-with-page (yes|no) "no">
<!ELEMENT Page (PageDrawer?)>
<!ATTLIST Page page-name CDATA #REQUIRED>
<!ATTLIST Page page-width CDATA #REQUIRED>
<!ATTLIST Page page-drawer CDATA #IMPLIED>
<!ATTLIST Page page-color CDATA #IMPLIED>
<!ATTLIST Page page-shape CDATA #IMPLIED>

<!ELEMENT PageDrawer (BlockGenusMember*)>

<!-- Si se especifica una papelera aparecerá en el espacio de trabajo.
Por tanto de sus elementos secundarios, un lugar para las imágenes debe ser especificado relativo al directorio de trabajo.
La imagen de basura abierto aparece cuando un usuario arrastra un bloque sobre la papelera. La imagen de basura cerrado es el predeterminado
imagen durante el estado estacionario. 
     -->
<!ELEMENT TrashCan (OpenTrashImage,ClosedTrashImage)>
<!ELEMENT OpenTrashImage (#PCDATA)>
<!ELEMENT ClosedTrashImage (#PCDATA)>

<!-- Por defecto, un minimapa siempre aparecerá en la esquina superior derecha
   del lienzo bloque, a menos que Enabled se establece en "no".
  	 -->
<!ELEMENT MiniMap EMPTY>
<!ATTLIST MiniMap enabled (yes|no) "yes">

<!--Por defecto, typeblocking se habilitará, de forma que cuando el usuario escribe en el lienzo
    bloques volarán que coincide con el texto introducido.
  	 -->
<!ELEMENT Typeblocking EMPTY>
<!ATTLIST Typeblocking enabled (yes|no) "yes">
